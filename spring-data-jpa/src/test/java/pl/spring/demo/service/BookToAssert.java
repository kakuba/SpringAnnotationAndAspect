package pl.spring.demo.service;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;

import pl.spring.demo.to.BookTo;


/**
 * {@link BookTo} specific assertions - Generated by CustomAssertionGenerator.
 */
public class BookToAssert extends AbstractAssert<BookToAssert, BookTo> {

  /**
   * Creates a new </code>{@link BookToAssert}</code> to make assertions on actual BookTo.
   * @param actual the BookTo we want to make assertions on.
   */
  public BookToAssert(BookTo actual) {
    super(actual, BookToAssert.class);
  }

  /**
   * An entry point for BookToAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myBookTo)</code> and get specific assertion with code completion.
   * @param actual the BookTo we want to make assertions on.
   * @return a new </code>{@link BookToAssert}</code>
   */
  public static BookToAssert assertThat(BookTo actual) {
    return new BookToAssert(actual);
  }

  /**
   * Verifies that the actual BookTo's authors is equal to the given one.
   * @param authors the given authors to compare the actual BookTo's authors to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BookTo's authors is not equal to the given one.
   */
  public BookToAssert hasAuthors(String authors) {
    // check that actual BookTo we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> authors to be:\n  <%s>\n but was:\n  <%s>", actual, authors, actual.getAuthors());
    
    // check
    if (!actual.getAuthors().equals(authors)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BookTo's id is equal to the given one.
   * @param id the given id to compare the actual BookTo's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BookTo's id is not equal to the given one.
   */
  public BookToAssert hasId(Long id) {
    // check that actual BookTo we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> id to be:\n  <%s>\n but was:\n  <%s>", actual, id, actual.getId());
    
    // check
    if (!actual.getId().equals(id)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BookTo's title is equal to the given one.
   * @param title the given title to compare the actual BookTo's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BookTo's title is not equal to the given one.
   */
  public BookToAssert hasTitle(String title) {
    // check that actual BookTo we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> title to be:\n  <%s>\n but was:\n  <%s>", actual, title, actual.getTitle());
    
    // check
    if (!actual.getTitle().equals(title)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

}
